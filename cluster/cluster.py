import tensorflow as tf
import numpy as np
from tensorflow.contrib.factorization import KMeans
from tensorflow.python.framework import ops
from tensorflow.contrib.factorization.python.ops.clustering_ops \
        import CLUSTERS_VAR_NAME,_InitializeClustersOpFactory,COSINE_DISTANCE,nn_impl

class ImageKMeans(KMeans):
    def __init__(self,
            model_path = "D:/tfroot/kmeans/checkpoint_200/kmeans_model.ckpt",
            feature_dims = 1536,
            num_clusters = 25,
            initial_clusters = 'kmeans_plus_plus',
            kmeans_plus_plus_num_retries = 5,
            random_seed = 0):

        # initialize kmeans model path.
        self.model_path = model_path
        # initialize kmeans_x, fetch_kmeans, kmeans_session
        self.kmeans_x = tf.placeholder(tf.float32, shape=[None, feature_dims])
        self.kmeans_session, self.fetch_kmeans = None, []
        self.init_kmeans(num_clusters = num_clusters,
            initial_clusters = initial_clusters,
            random_seed = random_seed,
            kmeans_plus_plus_num_retries = kmeans_plus_plus_num_retries)

    def training_graph(self):
      """Generate a training graph for kmeans algorithm.
      """
      # Implementation of kmeans.
      if (isinstance(self._initial_clusters, str) or
          callable(self._initial_clusters)):
        initial_clusters = self._initial_clusters
        num_clusters = ops.convert_to_tensor(self._num_clusters)
      else:
        initial_clusters = ops.convert_to_tensor(self._initial_clusters)
        num_clusters = ops.convert_to_tensor(initial_clusters.shape[0])

      inputs = self._inputs
      (cluster_centers_var, cluster_centers_initialized, total_counts,
       cluster_centers_updated,
       update_in_steps) = self._create_variables(num_clusters)
      init_op = _InitializeClustersOpFactory(
          self._inputs, num_clusters, initial_clusters, self._distance_metric,
          self._random_seed, self._kmeans_plus_plus_num_retries,
          self._kmc2_chain_length, cluster_centers_var, cluster_centers_updated,
          cluster_centers_initialized).op()
      cluster_centers = cluster_centers_var

      if self._distance_metric == COSINE_DISTANCE:
        inputs = self._l2_normalize_data(inputs)
        if not self._clusters_l2_normalized():
          cluster_centers = nn_impl.l2_normalize(cluster_centers, dim=1)

      all_scores, scores, cluster_idx = self._infer_graph(inputs, cluster_centers)
      if self._use_mini_batch:
        sync_updates_op = self._mini_batch_sync_updates_op(
            update_in_steps, cluster_centers_var, cluster_centers_updated,
            total_counts)
        assert sync_updates_op is not None
        with ops.control_dependencies([sync_updates_op]):
          training_op = self._mini_batch_training_op(
              inputs, cluster_idx, cluster_centers_updated, total_counts)
      else:
        assert cluster_centers == cluster_centers_var
        training_op = self._full_batch_training_op(
            inputs, num_clusters, cluster_idx, cluster_centers_var)

      return (all_scores, cluster_idx, scores, cluster_centers_initialized,
              init_op, training_op)

    def init_kmeans(self, num_clusters = 25,
            initial_clusters = 'kmeans_plus_plus',
            distance_metric = 'cosine',
            use_mini_batch = True,
            mini_batch_steps_per_iteration = 1,
            random_seed = 0,
            kmeans_plus_plus_num_retries = 5,
            kmc2_chain_length = 200):

        # load saved cluster centers.
        saver = tf.train.import_meta_graph(self.model_path + '.meta')
        sess = tf.Session()
        saver.restore(sess, self.model_path)
        cluster_centers = sess.run(tf.get_default_graph().get_tensor_by_name(CLUSTERS_VAR_NAME+':0'))
        initial_clusters = tf.convert_to_tensor(cluster_centers)
        sess.close()
        del sess
        KMeans.__init__(self,self.kmeans_x, num_clusters, initial_clusters, distance_metric,use_mini_batch,mini_batch_steps_per_iteration, random_seed,kmeans_plus_plus_num_retries,kmc2_chain_length)
        training_graph = self.training_graph()
        if len(training_graph) > 6:
            (all_scores, cluster_index, scores, cluster_centers_initialized,
                    cluster_centers_var, init_op, train_op) = training_graph
        else:
            (all_scores, cluster_index, scores, cluster_centers_initialized,
                    init_op, train_op) = training_graph

        cluster_index =  cluster_index[0]
        avg_distance = tf.reduce_mean(scores)
        init_vars = tf.global_variables_initializer()
        self.fetch_kmeans = [train_op, avg_distance, cluster_index, scores]
        if self.kmeans_session != None:
            self.kmeans_session.close()
            del self.kmeans_session
        self.kmeans_session = tf.Session()
        self.kmeans_session.run(init_vars)
        self.kmeans_session.run(init_op)

    def single_cluster(self, resnet_output_feature):
        _, d, idx, s = self.kmeans_session.run(self.fetch_kmeans, feed_dict={self.kmeans_x: fea})
        return idx[0]

if __name__ == "__main__":
    fea = "0.0,0.73406273,2.8854337,142.67143,16.912136,25.545038,195.83,0.24166116,76.66995,73.54207,185.58769,59.794304,151.63957,150.22731,153.88647,292.22995,214.60516,125.73851,42.484997,47.008083,35.42696,211.079,147.52824,56.131924,53.86601,222.01357,264.31638,243.42422,92.59855,191.67554,2.2252052,142.80867,2.428481,2.3366814,128.35393,151.77544,1.6702137,275.8175,38.71802,160.9783,211.92229,34.285217,38.298805,114.076355,126.95087,123.34632,11.25715,6.2221003,153.93817,134.38788,188.88678,93.75918,65.38168,3.886749,64.05556,90.83499,37.592144,143.12262,2.0821586,184.68271,38.395462,107.832634,20.431473,70.82141,69.53978,91.662125,90.43167,120.553154,119.54848,293.3864,18.365513,68.1072,39.708103,1.7610424,21.202627,68.24399,105.8184,163.70172,84.74456,4.4457636,120.899124,9.193273,62.502945,83.587746,1.9641639,0.0,119.611664,148.39934,31.11887,1.6918789,133.52614,86.482666,5.8445835,116.52136,272.7797,55.15712,68.98657,4.117301,48.294205,3.353772,17.653034,48.795822,70.71019,44.281948,72.34947,1.4982861,0.0,22.201368,37.941216,49.101276,29.251322,104.87434,0.10177168,321.84238,97.28558,82.79344,158.86462,208.25552,114.254555,319.96417,0.44382188,11.4472685,33.1301,57.95366,94.701485,17.68096,69.30869,24.366537,150.55347,176.86684,1.3787684,58.735237,2.28018,23.136843,4.2059226,25.131575,1.562567,230.84514,171.19647,94.272934,16.667898,2.0633545,32.96966,99.979195,102.44655,397.24753,7.817388,76.89589,77.3624,84.72096,48.78836,199.87743,132.94264,163.52136,74.6767,92.60436,54.837353,290.68118,56.477154,4.035995,152.98062,106.4655,92.226105,14.94809,18.288956,248.05003,10.095029,12.093396,11.660854,4.614395,182.59534,78.343445,90.666595,0.0,6.4298797,25.06397,30.353603,8.716894,24.019356,0.0,60.954086,80.02916,0.0015745196,124.15807,110.00909,106.241394,121.20526,0.0,109.460106,27.086407,204.29732,8.970263,149.04056,217.5623,146.87776,237.44499,102.72635,98.99355,14.743926,32.807114,39.84146,2.6989005,33.518066,5.1650367,38.47664,1.8250749,2.669568,46.597927,275.06903,180.23572,16.992718,98.33805,151.341,32.33631,166.82732,48.873394,163.802,27.58248,43.254124,63.010563,17.195822,11.815614,96.57991,6.7816734,6.3896813,318.32254,23.549736,156.80429,0.06616395,98.22791,28.850521,64.39785,149.28973,104.58546,148.90326,17.594969,0.18429638,278.8475,50.42481,0.6344317,262.45828,232.0161,28.176628,67.11824,3.0091486,16.780079,193.97539,133.15077,251.92477,118.402466,0.0,68.25631,129.803,25.68023,0.0,372.63882,198.987,0.48688972,130.05351,63.418797,11.245728,164.4114,358.57886,246.22249,3.6041684,14.616854,141.9351,0.27540874,251.5071,0.9423402,358.34958,182.82645,95.91438,126.014725,145.50354,113.89311,51.50011,247.24196,55.666573,0.0,62.11056,52.00792,125.56928,151.67097,77.14586,75.95169,24.652082,64.4651,57.202682,89.19255,123.25794,52.19496,2.5243857,143.96378,5.4729776,145.88293,143.30934,164.78404,105.13972,2.9822907,142.96884,7.18326,2.554029,259.84973,261.31985,91.75396,14.573955,101.98468,124.64482,0.45774445,245.89836,34.891922,49.133583,33.546684,102.916145,71.4228,118.16199,73.13762,4.1462717,68.875305,169.25731,0.0,70.48521,83.231285,1.0400517,134.9667,7.674661,59.990322,121.76727,191.75732,88.0588,88.0958,159.65866,169.83592,42.068867,43.071136,100.034134,42.14097,0.0,12.059038,132.49368,120.99392,350.00217,118.01296,166.10858,5.6471195,78.070816,162.02324,107.221725,79.89537,0.0,108.067604,271.065,213.05571,152.8712,102.946396,148.53378,2.9827862,180.48291,230.28445,36.230297,28.4688,77.23522,5.7744203,0.14574921,38.379513,104.855515,181.3305,155.16707,85.618835,222.87517,153.44017,128.9657,180.88832,78.83964,97.74523,19.448942,29.512207,248.35522,162.00313,89.86139,160.06157,4.506923,75.11251,158.40964,37.213467,11.489544,299.40384,12.87179,281.0623,93.76606,2.876209,75.7422,276.05698,139.90935,224.76904,83.56606,113.42092,4.0508513,94.57863,129.83,14.792186,109.59469,128.84204,296.94165,125.46741,275.11743,223.06659,108.98124,91.25885,170.88737,20.366724,7.8421044,7.1330194,143.46445,80.16615,161.66673,3.3465314,33.000305,37.95479,272.48865,261.75156,175.0733,42.26084,17.540297,0.2793774,12.253172,152.34155,60.333454,1.6766628,3.754683,25.826515,107.80207,1.8925332,194.56987,1.5818799,52.434536,115.31031,150.21802,299.79526,0.66545147,260.92026,6.668949,70.98736,192.72032,3.8752346,41.144295,31.958027,44.039948,191.98332,83.08372,67.16201,8.370405,148.26906,151.8559,114.134834,97.80374,0.0,49.057133,19.81689,246.44371,55.08142,121.297226,40.673515,67.05175,36.361908,31.053013,25.559977,58.938725,0.81996745,41.12705,42.250046,121.8068,31.856344,8.181767,151.02765,25.894945,172.80583,96.526245,25.244043,4.564639,85.877914,143.38515,21.218842,126.55904,218.23409,67.865135,35.670403,213.01009,0.2506941,164.84636,0.20723262,150.99298,16.535645,5.026196,14.424473,20.542997,0.15964843,14.422797,130.38414,247.0089,261.95154,3.6524901,103.29657,82.78476,163.80174,92.50165,293.81354,6.4594555,4.4588847,213.68779,32.784138,7.434208,172.04619,25.96433,128.02206,175.12923,117.65648,184.90465,8.789654,115.75511,115.94152,188.64484,121.37694,10.4132,110.2684,238.55997,230.60931,2.3084593,206.92711,56.521507,44.138294,160.98639,42.41596,20.849667,113.29414,100.06874,1.5043517,0.020208599,0.0,61.51622,109.73813,60.88177,29.983408,158.19246,5.030475,204.26903,32.66348,22.693153,120.25689,84.72661,15.267066,3.164058,66.17717,269.35764,164.32236,45.81322,39.944073,16.853947,10.612048,5.3791876,111.801384,0.12678239,234.52905,164.17079,0.55726147,18.655653,320.9157,84.565506,49.470673,105.81982,29.712688,148.70746,84.92969,50.14736,160.77834,7.9909806,114.814445,74.88131,78.42043,167.07304,1.4652961,53.517014,166.1324,156.88217,48.580795,119.21955,0.7297908,0.14684442,223.50963,25.801277,52.328465,161.32312,126.50123,11.661581,127.43205,4.433984,25.034513,59.572216,179.09782,99.010185,158.00168,19.758673,187.63791,123.82337,307.83417,198.72232,18.387571,21.559109,104.2406,337.40396,98.02872,195.3492,31.701641,72.07268,94.01172,184.96996,143.62169,26.12296,265.93573,2.3901248,135.28691,31.35457,142.4342,81.51457,82.95289,2.2270627,3.675318,3.2636466,166.60037,35.700134,59.932014,116.368805,3.1251328,295.64627,93.52269,122.26013,15.009635,49.66094,153.08505,136.86255,127.43245,23.785107,50.78443,29.292704,0.96273917,324.22522,89.48808,133.74243,0.8324233,111.44593,46.209194,143.56432,9.914887,261.22495,54.86159,93.895775,104.23574,83.38952,162.67249,6.939998,171.34306,0.7466366,97.70204,0.0,41.8564,2.0741425,89.316444,11.767045,130.06981,15.212728,184.60468,126.7199,12.912697,173.0478,0.0,163.21852,86.54497,76.52946,23.53542,13.193709,104.24412,16.247175,132.37503,69.000046,7.621718,19.273493,180.65724,95.43205,12.535419,2.2753398,234.88455,112.6719,89.80564,45.702637,52.301025,0.0,21.910559,20.90316,142.04726,6.7095714,288.3809,177.08987,46.84539,238.84251,152.78331,70.0955,100.74848,4.853204,23.054316,0.16244788,138.7818,36.099785,153.68956,213.07816,0.2357119,105.28542,1.2566938,41.2844,132.96904,199.0499,157.46622,118.02797,66.70104,3.2668006,102.346214,0.0,168.55844,0.0,31.396132,162.74014,114.52863,308.79382,83.547295,1.116299,328.32062,72.367874,65.453804,42.42334,136.73935,21.036303,184.21696,131.80913,177.0013,90.26619,47.69789,244.01875,235.91025,215.24777,97.59054,338.84143,93.086784,87.22554,13.916861,105.09541,139.49873,7.4745884,259.21274,128.25287,6.240758,256.04843,186.87386,31.7876,13.505883,165.24255,263.88824,3.236222,0.32964906,157.4704,18.252628,16.540943,236.17278,6.8928266,225.62514,7.08499,89.44539,0.5387618,34.075798,104.13657,122.332726,0.21506852,234.31462,1.7795923,118.01692,58.005497,0.46733457,46.62711,0.45213598,26.993982,103.784065,75.506004,46.943184,84.605675,157.41885,89.63161,9.729251,49.066944,26.90749,4.572895,13.381253,168.85207,97.06604,220.60083,0.21217333,13.970905,108.7524,102.10586,18.424858,99.15987,71.252846,2.8962297,3.1603627,97.02853,63.14429,1.237186,44.6122,3.9600189,197.50659,89.7989,20.181782,176.82593,128.79085,209.89693,0.21893856,146.60844,294.16357,41.88726,143.37173,46.491833,15.68878,66.75845,61.595013,208.24876,47.267063,130.33778,155.909,1.4769282,9.370027,33.451065,6.008647,69.74704,44.32474,69.115326,74.79733,115.258484,4.053164,58.783615,36.436577,54.374107,0.30374542,282.66254,6.8010707,104.2541,170.67834,79.619865,24.635736,74.53425,68.55502,84.87439,155.47443,99.04034,1.1488416,219.90733,179.8569,168.27667,0.4396733,41.352577,0.0,19.358387,59.37302,135.55865,43.736183,166.74919,20.533062,122.731766,8.056665,194.18597,4.6338983,168.63387,5.2016835,15.355795,75.82959,0.67551786,0.3362408,0.49033725,95.24094,3.61079,4.832984,119.32721,1.9955516,43.663906,76.86897,21.30156,138.58838,3.6073737,1.2907479,25.235283,171.55019,171.41461,246.20831,98.41498,84.08703,11.4496975,204.03552,94.6767,20.894156,6.965257,141.24199,41.164055,85.60704,0.0,8.103558,162.55833,90.27761,27.580107,187.56384,144.70662,179.4747,2.5744545,0.72240585,8.437887,98.096596,9.470541,0.0,14.590112,126.08179,1.6152896,175.19063,147.54204,48.439533,53.304657,11.617241,5.737836,122.99872,68.83588,192.65778,6.9358706,58.55478,112.21746,66.2898,20.910664,287.08102,275.05103,7.2109675,83.21554,52.673798,4.4971046,135.60266,60.3767,177.59396,0.20325987,135.29074,170.76208,107.25039,67.47753,115.13836,109.18088,0.0,72.8552,68.375946,41.151104,57.926884,126.76966,216.07515,1.1986693,44.84918,146.59317,0.4552422,8.22854,43.73962,233.3645,54.607666,196.64308,159.89998,37.964546,108.11431,3.6216,153.5781,0.05271475,254.7661,183.26431,96.52055,40.322918,114.90421,48.38925,126.87596,9.301378,137.66588,33.51081,66.6656,207.51472,14.665166,10.540043,55.785633,148.71266,103.38175,109.60077,62.59397,168.37505,54.297894,0.7260999,95.58552,15.914613,19.893118,151.02309,293.54672,104.12059,103.06095,126.137794,42.25,34.631634,11.346757,3.4808254,0.590042,126.64422,64.018394,32.304176,107.82261,60.498943,167.53354,63.882614,118.16506,118.86756,214.71031,182.64795,203.18388,86.86209,1.4419457,20.384354,48.3433,4.507154,72.171936,122.78123,90.198586,229.72961,170.37137,0.6362426,43.554096,98.3966,6.140703,128.25175,153.16014,0.17886855,80.151855,139.55214,139.21156,96.72653,68.00836,0.00092135416,46.44203,214.63945,62.626404,163.13994,1.7162813,1.6456455,0.0,3.7865784,138.72383,235.2978,0.8873797,72.73843,0.09233433,114.55564,129.32977,129.03493,353.6742,50.19686,90.19295,13.29417,0.7308258,54.105778,11.398364,71.10706,45.426983,0.18090634,167.30333,1.8177942,1.5838903,34.6103,39.73554,57.446487,20.619967,199.21602,108.361275,35.551895,56.805904,194.81436,55.673637,90.239075,224.14375,0.0,121.05864,86.350266,131.70694,97.106346,19.090977,52.6794,123.86885,63.15279,76.87398,198.99698,31.900476,2.4865742,125.88188,11.7547655,166.51727,1.9432021,0.0,101.21306,0.006558208,94.36135,42.01677,144.10695,68.83954,106.077965,5.688788,5.923136,60.385475,8.855261,114.84729,220.43521,86.44441,87.56654,170.1861,115.69945,132.73575,106.82967,131.16502,105.94894,146.22893,79.28246,66.37979,0.16007742,6.1066647,196.40561,41.04211,116.3292,184.89917,248.05444,179.91585,116.78053,1.9524893,4.9879003,189.97736,140.07304,219.72816,102.03803,151.39821,115.610085,2.2250042,101.76488,3.4678183,8.115515,42.18735,86.10293,41.204205,216.63144,30.454441,67.22799,32.55655,37.144928,123.641975,56.872257,153.705,60.441826,2.95871,24.739763,65.08586,68.130714,74.871475,41.583424,18.246712,65.98555,218.09212,0.42828685,18.215794,66.73347,36.995323,67.79001,109.013954,114.22647,12.723455,115.638405,25.180485,159.42268,48.896477,61.073532,175.26743,73.74078,99.68453,63.09442,67.44761,2.6196346,11.077147,22.794624,38.45179,21.584963,22.365438,29.472324,135.83688,232.44287,130.45018,2.0475044,105.63549,115.35078,172.55316,0.0,43.91472,17.923939,83.89373,34.78255,37.547085,87.88217,205.83784,129.53793,59.231003,21.97498,54.71885,201.45341,10.732004,30.849785,21.718077,27.434847,60.621788,57.989613,56.689686,16.038816,112.93828,131.32574,110.06171,140.1222,84.42986,294.65585,70.20282,100.81851,0.0,124.03319,61.86841,74.97684,0.0,0.0,0.23136388,258.33792,32.81845,2.0290973,272.10672,191.30168,0.17883441,0.75885284,316.84436,93.58991,127.67434,34.479897,129.8542,106.37661,122.49884,130.21892,201.14186,2.9088097,76.0517,52.55637,178.33011,36.832714,96.28746,8.019374,25.392097,251.3036,126.02135,7.1348624,77.371826,7.974905,172.24074,2.119079,9.892648,167.54135,145.20808,67.48725,204.73903,81.883415,156.79916,117.08683,384.41794,167.36185,146.32811,164.23222,22.408335,28.168484,115.32255,4.065807,8.893549,163.08714,286.96503,159.23247,39.08928,26.98225,0.15175948,8.635123,53.133793,191.30548,165.81206,74.8139,142.98303,11.017866,37.533436,0.09105421,0.0,127.38048,281.41858,229.2981,4.7669635,16.064571,1.9869065,6.599672,4.751211,135.6431,40.215244,135.74728,50.682915,0.42796183,0.0,117.6271,179.23892,56.89731,82.49083,0.99104667,195.30025,9.596196,50.424458,11.352668,1.292897,59.444397,6.8768997,53.835644,6.1946115,63.967937,20.766697,165.56999,126.39646,123.58078,200.71033,41.12034,214.16098,77.41616,92.69707,12.767059,2.0977066,143.89786,80.38686,0.17301893,5.9313326,42.41797,106.816605,0.11397347,83.79894,192.44254,71.85477,0.78526574,78.638466,147.67996,38.743572,123.038605,9.644868,6.53417,0.0,183.62297,8.354201,110.709015,162.99374,210.20316,6.8543434,240.83554,86.13733,74.32506,101.899124,15.2541485,228.34827,64.5407,83.37904,148.71509,238.8756,78.790115,76.80513,41.455605,47.62451,244.91562,212.52773,9.2153,196.88123,9.607006,227.67012,100.07989,0.39666015,86.65189,107.45567,146.64368,123.34874,39.28443,78.6475,229.67123,8.26902,315.71463,23.05922,296.85587,85.19298,131.529,8.473876,105.98978,0.0,135.4002,0.60606974,136.3154,160.55885,178.95685,229.5011,267.0769,124.768295,59.790726,50.346817,0.24316777,24.063515,11.713233,85.39529,9.213121,11.476151,125.87996,42.356407,257.95065,61.396164,59.942802,19.571804,12.384291,0.4717166,109.32509,27.818815,101.197716,68.240585,79.1256,87.53478,1.3368624,116.35576,5.56477,153.83887,12.388868,203.3197,158.18774,191.20218,12.733103,21.867157,115.83188,50.560974,102.985245,35.082047,0.0,32.873558,173.61658,47.714203,9.805853,31.311056,79.83332,252.45413,158.28421,22.348146,87.799,152.12373,271.15506,69.4706,2.6885433,23.316893,156.26677,132.29811,6.906619,11.438664,96.098724,2.0802906,0.9976652,56.267635,79.81479,160.04364,98.83022,26.977398,9.811061,5.4122386,158.71727,151.02286,88.09856,261.02036,34.960213,29.011002,48.771038,2.4345949,46.523888,85.09077,138.77777,67.50602,145.99825,1.0577629,72.47072,295.10764,6.0866294,0.47580245,129.43742,507.47818,321.78604,25.036407,43.79585,145.78548,4.402823,215.97682,3.9213026,254.11754,229.19943,9.809458,129.19142,107.757454,109.17971,11.448068,254.59999,145.36942,195.28552,192.10881,3.6488106,122.66303,226.5495,81.92776,136.44101,232.86671,29.042126,152.15755,38.519894,26.316162,138.82544,148.04376,96.24119,33.30452,83.63312,36.866947"
    fea = np.asarray([[float(e) for e in fea.split(',')]], dtype=np.float32)
    obj = ImageKMeans()
    res = obj.single_cluster(fea)
    print(res)